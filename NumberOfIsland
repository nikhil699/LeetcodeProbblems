class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        n = len(grid)
        m = len(grid[0])

        def dfs(grid,i,j,n,m):
            if i < 0 or j < 0 or i >= n or j >= m or grid[i][j] == "0":
                return
            
            grid[i][j] = "0"
            dfs(grid,i+1,j,n,m)
            dfs(grid,i,j+1,n,m)
            dfs(grid,i-1,j,n,m)
            dfs(grid,i,j-1,n,m) 

        countIsland = 0
        for i in range(n):
            for j in range(m):
                if grid[i][j] == "1":
                    countIsland = countIsland + 1
                    dfs(grid,i,j,n,m)

        
        return countIsland

        
grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
sol = Solution()
print(sol.numIslands(grid))