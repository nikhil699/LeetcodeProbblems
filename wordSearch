# So, the final complexities are:
# ✅ Time Complexity: O(n * m * 4^w) (Each cell can explore 4 directions up to w depth)
# ✅ Space Complexity: O(w) (Recursion depth at most w due to backtracking)

class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """

        row = len(board)
        col = len(board[0])

        def dfs(i,j,index):
            if len(word) == index:
                return True
            if i < 0 or j < 0 or j >= col or i >= row or board[i][j] != word[index]:
                return False
            
            temp = board[i][j]
            board[i][j] = "#"

            found = (dfs(i+1,j,index+1) or
            dfs(i-1,j,index+1) or
            dfs(i,j+1,index+1) or
            dfs(i,j-1,index+1)) 
            
            board[i][j] = temp

            return found

        for i in range(row):
            for j in range(col):
                if board[i][j] == word[0]:
                    if dfs(i, j, 0):
                        return True

        return False

board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]]
word = "ABCCED"
sol = Solution()



print(sol.exist(board,word))