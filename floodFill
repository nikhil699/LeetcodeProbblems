# time complexity : 0(n*m)
# space Cpmplextiy :  0(n*m)

from collections import deque

class Solution(object):
    def floodFill(self, image, sr, sc, color):
        """
        :type image: List[List[int]]
        :type sr: int
        :type sc: int
        :type color: int
        :rtype: List[List[int]]
        """
        directions = [(0,1),(-1,0),(1,0),(0,-1)]
        queue = deque([(sr, sc)])
        row = len(image)
        col = len(image[0])
        original_color = image[sr][sc]

        # If the starting pixel is already the target color, return the image as is.
        if original_color == color:
            return image

        while queue:
            x1, y1 = queue.popleft()
            
            # Change color
            image[x1][y1] = color  

            for dx, dy in directions:
                x, y = x1 + dx, y1 + dy

                # Corrected boundary checks
                if x < 0 or y < 0 or x >= row or y >= col or image[x][y] != original_color:
                    continue  # Continue instead of returning

                queue.append((x, y))

        return image
    
image = [[1,1,1],[1,1,0],[1,0,1]]
sr = 1
sc = 1
color = 2

sol = Solution()

print(sol.floodFill(image,sr,sc,color))






# class Solution:
#     def floodFill(self, image, sr, sc, color):
#         original_color = image[sr][sc]
#         if original_color == color:
#             return image

#         def dfs(x, y):
#             if x < 0 or y < 0 or x >= len(image) or y >= len(image[0]) or image[x][y] != original_color:
#                 return  
            
#             image[x][y] = color  # Change color
#             for dx, dy in [(0,1),(-1,0),(1,0),(0,-1)]:
#                 dfs(x + dx, y + dy)

#         dfs(sr, sc)
#         return image
