# Given array: nums = [3, 2, 1, 5, 6, 4], k = 2

# âœ… Min Heap Maintain karenge (size 2 tak hi rakhenge)

# Step	Element	Heap (Min Heap of size k = 2)
# 1	3	[3]
# 2	2	[2, 3]
# 3	1	[2, 3] (1 chhota hai, ignore)
# 4	5	[3, 5] (2 chhota tha, remove)
# 5	6	[5, 6] (3 chhota tha, remove)
# 6	4	[5, 6] (4 chhota hai, ignore)

# Time Complexity : 0(n log k)
# Space complexity : 0(k)
# Time Complexity: O(N log K)
# Each insertion/removal in a min-heap takes O(log K).

import heapq

class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        heap = []
        
        for item in nums:
            heapq.heappush(heap,item)

            if len(heap) > k:
                heapq.heappop(heap)
        
        return heap[0]

sol = Solution()       
nums = [3,2,1,5,6,4]
k = 2
print(sol.findKthLargest(nums,k))