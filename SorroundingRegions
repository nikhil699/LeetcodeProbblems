# Approach : The approach to solving this problem involves three main steps. First, we identify all 'O' cells that are on the boundary of the matrix, as well as those connected to them. These boundary-connected 'O' cells are marked with a temporary symbol like 'Z' using DFS or BFS. This ensures that we do not mistakenly flip them to 'X'. Next, we iterate through the matrix and convert all remaining 'O' cells to 'X' since they are fully surrounded by 'X' on all sides. Finally, we restore the temporarily marked 'Z' cells back to 'O', as these were originally connected to the boundary and should not be changed. This approach ensures that only the truly surrounded regions are flipped, while boundary-connected regions remain unchanged

# Time : 0(n*m)
# Space : 0(n*m)

class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        rows = len(board)
        columns = len(board[0])

        def dfs(board,i,j,rows,columns):
            if i < 0 or j < 0 or i >= rows or j >= columns or board[i][j] != "O":
                return
            board[i][j] = "Z"
            dfs(board,i+1,j,rows,columns)
            dfs(board,i-1,j,rows,columns)
            dfs(board,i,j+1,rows,columns)
            dfs(board,i,j-1,rows,columns)


        # mark boundary with different symbol apart from O and X
        for i in range(rows):
            if board[i][0] == "O":
                dfs(board,i,0,rows,columns)
            if board[i][columns - 1] == "O":
                dfs(board,i,columns - 1,rows,columns)
        
        for i in range(columns):
            if board[0][i] == "O":
                dfs(board,0,i,rows,columns)
            if board[rows - 1][i] == "O":
                dfs(board,rows - 1,i,rows,columns)
        
        for i in range(rows):
            for j in range(columns):
                if board[i][j] == "O":
                    board[i][j] = "X"
        
        for i in range(rows):
            for j in range(columns):
                if board[i][j] == "Z":
                    board[i][j] = "O" 
        

        return board


board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
soll = Solution()
soll.solve(board) # This modifies board in-place
for row in board:
    print(row) 
